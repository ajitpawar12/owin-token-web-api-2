//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TokenAuth.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SchoolDBEntities : DbContext
    {
        public SchoolDBEntities()
            : base("name=SchoolDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FetchStudent> FetchStudents { get; set; }
        public virtual DbSet<Student> Students { get; set; }
    
        public virtual int Sp_DeleteStudent(Nullable<int> sId)
        {
            var sIdParameter = sId.HasValue ?
                new ObjectParameter("SId", sId) :
                new ObjectParameter("SId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DeleteStudent", sIdParameter);
        }
    
        public virtual ObjectResult<Sp_GetAllStudents_Result> Sp_GetAllStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetAllStudents_Result>("Sp_GetAllStudents");
        }
    
        public virtual ObjectResult<Sp_GetStudentDetailsById_Result> Sp_GetStudentDetailsById(Nullable<int> sId)
        {
            var sIdParameter = sId.HasValue ?
                new ObjectParameter("SId", sId) :
                new ObjectParameter("SId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetStudentDetailsById_Result>("Sp_GetStudentDetailsById", sIdParameter);
        }
    
        public virtual int Sp_InsertStudent(string fName, string lName, Nullable<System.DateTime> bDate, string city, string email, Nullable<decimal> phone, string password)
        {
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var bDateParameter = bDate.HasValue ?
                new ObjectParameter("BDate", bDate) :
                new ObjectParameter("BDate", typeof(System.DateTime));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(decimal));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertStudent", fNameParameter, lNameParameter, bDateParameter, cityParameter, emailParameter, phoneParameter, passwordParameter);
        }
    
        public virtual int Sp_UpdateStudent(Nullable<int> sId, string fName, string lName, Nullable<System.DateTime> bDate, string city, string email, Nullable<decimal> phone)
        {
            var sIdParameter = sId.HasValue ?
                new ObjectParameter("SId", sId) :
                new ObjectParameter("SId", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var bDateParameter = bDate.HasValue ?
                new ObjectParameter("BDate", bDate) :
                new ObjectParameter("BDate", typeof(System.DateTime));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateStudent", sIdParameter, fNameParameter, lNameParameter, bDateParameter, cityParameter, emailParameter, phoneParameter);
        }
    }
}
